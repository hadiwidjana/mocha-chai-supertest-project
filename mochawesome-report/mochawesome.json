{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-08-11T14:41:17.535Z",
    "end": "2022-08-11T14:41:18.110Z",
    "duration": 575,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9ff6a2d6-c0c1-49c5-b7ef-e5e7f64c77c7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4b77e7c9-d674-434f-97bd-ab63a6a09964",
          "title": "[@get-data] GET testcases",
          "fullFile": "C:\\Fazztrack_Satria\\mocha-homework\\testcases\\getByIDTestcase.js",
          "file": "\\testcases\\getByIDTestcase.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"[@get-data] GET testcases\"",
              "fullTitle": "[@get-data] GET testcases \"before all\" hook in \"[@get-data] GET testcases\"",
              "timedOut": false,
              "duration": 415,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//initial post the data\nlet response = await api.postUser(jsonPostData);\nexpect(response.status).to.equal(200);\ntargetID = response.body.id;",
              "err": {},
              "uuid": "f3394db7-2da4-4ee2-86d1-eda20b98e238",
              "parentUUID": "4b77e7c9-d674-434f-97bd-ab63a6a09964",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"[@get-data] GET testcases\"",
              "fullTitle": "[@get-data] GET testcases \"after all\" hook in \"[@get-data] GET testcases\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//delete after finish\nlet response = await api.deleteUser(targetID);\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "df0795f7-fec8-41b8-9e4c-48d241b8fe88",
              "parentUUID": "4b77e7c9-d674-434f-97bd-ab63a6a09964",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[@positive1] search user by valid ID",
              "fullTitle": "[@get-data] GET testcases [@positive1] search user by valid ID",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await api.getUserById(targetID);\nexpect(response.status).to.equal(200); //status code check\nexpect(response.body.id).to.equal(targetID); //ID check\nexpect(response.body).jsonSchema(jsonSchemaGet); //schema check",
              "err": {},
              "uuid": "664561b3-fef3-447d-968b-312732201753",
              "parentUUID": "4b77e7c9-d674-434f-97bd-ab63a6a09964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@negative1] search user by invalid ID",
              "fullTitle": "[@get-data] GET testcases [@negative1] search user by invalid ID",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await api.getUserById(\"12345\");\nexpect(response.status).to.equal(404); //status code check\nexpect(response.body.errorCode).to.equal(\"ER-01\"); //Error code check\nexpect(response.body).to.contain.like({\"message\": \"user not found\"});",
              "err": {},
              "uuid": "b4f7e1dd-34ac-4edf-8b30-1f9813fc5baa",
              "parentUUID": "4b77e7c9-d674-434f-97bd-ab63a6a09964",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "664561b3-fef3-447d-968b-312732201753",
            "b4f7e1dd-34ac-4edf-8b30-1f9813fc5baa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 42,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "726373d9-9cd4-40b0-847c-0b0788c9faa8",
          "title": "[@update-data] PUT testcases",
          "fullFile": "C:\\Fazztrack_Satria\\mocha-homework\\testcases\\putTestcase.js",
          "file": "\\testcases\\putTestcase.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"[@update-data] PUT testcases\"",
              "fullTitle": "[@update-data] PUT testcases \"before all\" hook in \"[@update-data] PUT testcases\"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//initial post the data\nlet response = await api.postUser(jsonPostData);\nexpect(response.status).to.equal(200);\ntargetID = response.body.id;",
              "err": {},
              "uuid": "0fa811da-08f0-478e-aab7-00114d1192ee",
              "parentUUID": "726373d9-9cd4-40b0-847c-0b0788c9faa8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"[@update-data] PUT testcases\"",
              "fullTitle": "[@update-data] PUT testcases \"after all\" hook in \"[@update-data] PUT testcases\"",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//delete after finish\nlet response = await api.deleteUser(targetID);\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "aeb0ebfd-71ea-43f1-83d2-3c3a558f895d",
              "parentUUID": "726373d9-9cd4-40b0-847c-0b0788c9faa8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[@positive1] update occupation and nationality data",
              "fullTitle": "[@update-data] PUT testcases [@positive1] update occupation and nationality data",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let occupationUpdate = 'Soccer Athlete'\nlet nationalityUpdate = 'Indonesian'\nlet response = await api.putUser(\n    {\n        \"id\": targetID,\n        \"firstName\": \"Kamen\",\n        \"lastName\": \"Rider\",\n        \"age\": 30,\n        \"occupation\": occupationUpdate,\n        \"nationality\": nationalityUpdate,\n        \"hobbies\": [\n          \"Riding a motorcycle\"\n        ],\n        \"gender\": \"MALE\",\n        \"createdDate\": \"2022-08-11T19:04:27.816\",\n        \"updatedDate\": null\n      }\n);\nexpect(response.status).to.equal(200); //status code check\nexpect(response.body.id).to.equal(targetID); //ID check\nexpect(response.body).to.contain.like({occupation: occupationUpdate, nationality: nationalityUpdate}); //data check\nexpect(response.body).jsonSchema(jsonSchemaPut); //schema check",
              "err": {},
              "uuid": "dbba7b2f-f136-4ef0-a78d-59e081ac79ce",
              "parentUUID": "726373d9-9cd4-40b0-847c-0b0788c9faa8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@negative1] fail to update when age is 0",
              "fullTitle": "[@update-data] PUT testcases [@negative1] fail to update when age is 0",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let occupationUpdate = 'Soccer Athlete'\nlet nationalityUpdate = 'Indonesian'\nlet response = await api.putUser(\n    {\n        \"id\": targetID,\n        \"firstName\": \"Kamen\",\n        \"lastName\": \"Rider\",\n        \"age\": 0,\n        \"occupation\": occupationUpdate,\n        \"nationality\": nationalityUpdate,\n        \"hobbies\": [\n          \"Riding a motorcycle\"\n        ],\n        \"gender\": \"MALE\",\n        \"createdDate\": \"2022-08-11T19:04:27.816\",\n        \"updatedDate\": null\n      }\n);\nexpect(response.status).to.equal(400); //status code check\nexpect(response.body.errorCode).to.equal('ER-03'); //Error code check\nexpect(response.body).to.contain.like({\"message\": \"you must specify data for firstname, lastName, age, occupation, nationality, hobbies (at least 1), and gender\"}); //data check",
              "err": {},
              "uuid": "2c1f4267-aee8-4708-9adb-7061eae46554",
              "parentUUID": "726373d9-9cd4-40b0-847c-0b0788c9faa8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@negative2] fail to update when hobbies is empty array",
              "fullTitle": "[@update-data] PUT testcases [@negative2] fail to update when hobbies is empty array",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let occupationUpdate = 'Soccer Athlete'\nlet nationalityUpdate = 'Indonesian'\nlet response = await api.putUser(\n    {\n        \"id\": targetID,\n        \"firstName\": \"Kamen\",\n        \"lastName\": \"Rider\",\n        \"age\": 30,\n        \"occupation\": occupationUpdate,\n        \"nationality\": nationalityUpdate,\n        \"hobbies\": [\n          \n        ],\n        \"gender\": \"MALE\",\n        \"createdDate\": \"2022-08-11T19:04:27.816\",\n        \"updatedDate\": null\n      }\n);\nexpect(response.status).to.equal(400); //status code check\nexpect(response.body.errorCode).to.equal('ER-03'); //Error code check\nexpect(response.body).to.contain.like({\"message\": \"you must specify data for firstname, lastName, age, occupation, nationality, hobbies (at least 1), and gender\"}); //data check",
              "err": {},
              "uuid": "2cac9303-7620-4f6f-9b3a-23162dcae621",
              "parentUUID": "726373d9-9cd4-40b0-847c-0b0788c9faa8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@negative3] fail to update when id is null",
              "fullTitle": "[@update-data] PUT testcases [@negative3] fail to update when id is null",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let occupationUpdate = 'Soccer Athlete'\nlet nationalityUpdate = 'Indonesian'\nlet response = await api.putUser(\n    {\n        \"id\": null,\n        \"firstName\": \"Kamen\",\n        \"lastName\": \"Rider\",\n        \"age\": 30,\n        \"occupation\": occupationUpdate,\n        \"nationality\": nationalityUpdate,\n        \"hobbies\": [\n          \"Riding a motorcycle\"\n        ],\n        \"gender\": \"MALE\",\n        \"createdDate\": \"2022-08-11T19:04:27.816\",\n        \"updatedDate\": null\n      }\n);\nexpect(response.status).to.equal(404); //status code check\nexpect(response.body.errorCode).to.equal('ER-01'); //Error code check\nexpect(response.body).to.contain.like({\"message\": \"user not found\"}); //data check",
              "err": {},
              "uuid": "b5ae8f3c-7ebe-4416-8fca-32238f38b91d",
              "parentUUID": "726373d9-9cd4-40b0-847c-0b0788c9faa8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dbba7b2f-f136-4ef0-a78d-59e081ac79ce",
            "2c1f4267-aee8-4708-9adb-7061eae46554",
            "2cac9303-7620-4f6f-9b3a-23162dcae621",
            "b5ae8f3c-7ebe-4416-8fca-32238f38b91d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 57,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}