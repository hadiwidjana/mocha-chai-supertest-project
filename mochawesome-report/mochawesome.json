{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-08-18T09:30:53.454Z",
    "end": "2022-08-18T09:30:53.591Z",
    "duration": 137,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "aeffe8d0-1412-467c-95e2-dd5d9b3560b7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "17ea00a7-8458-4859-9efb-9d9fd86cdc53",
          "title": "[@get-data] GET testcases",
          "fullFile": "C:\\Fazztrack_Satria\\mocha-homework\\testcases\\getByIDTestcase.js",
          "file": "\\testcases\\getByIDTestcase.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"[@get-data] GET testcases\"",
              "fullTitle": "[@get-data] GET testcases \"before all\" hook in \"[@get-data] GET testcases\"",
              "timedOut": false,
              "duration": 58,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//initial post the data\nlet response = await api.postUser(jsonPostData);\nexpect(response.status).to.equal(200);\ntargetID = response.body.id;",
              "err": {},
              "uuid": "3ba9f8e4-8e5a-490e-8a5d-22fa60ac1106",
              "parentUUID": "17ea00a7-8458-4859-9efb-9d9fd86cdc53",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"[@get-data] GET testcases\"",
              "fullTitle": "[@get-data] GET testcases \"after all\" hook in \"[@get-data] GET testcases\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//delete after finish\nlet response = await api.deleteUser(targetID);\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "f8f64f60-6eca-465e-9c54-8b996ac944ee",
              "parentUUID": "17ea00a7-8458-4859-9efb-9d9fd86cdc53",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[@positive1] search user by valid ID",
              "fullTitle": "[@get-data] GET testcases [@positive1] search user by valid ID",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await api.getUserById(targetID);\nexpect(response.status).to.equal(200); //status code check\nexpect(response.body.id).to.equal(targetID); //ID check\nexpect(response.body).jsonSchema(jsonSchemaGet); //schema check",
              "err": {},
              "uuid": "a40bb00b-3550-4ad2-95b7-e9321405a62a",
              "parentUUID": "17ea00a7-8458-4859-9efb-9d9fd86cdc53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@negative1] search user by invalid ID",
              "fullTitle": "[@get-data] GET testcases [@negative1] search user by invalid ID",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await api.getUserById(\"12345\");\nexpect(response.status).to.equal(404); //status code check\nexpect(response.body.errorCode).to.equal(\"ER-01\"); //Error code check\nexpect(response.body).to.contain.like({\"message\": \"user not found\"});",
              "err": {},
              "uuid": "70bbd057-036e-46aa-af0c-a53d86091478",
              "parentUUID": "17ea00a7-8458-4859-9efb-9d9fd86cdc53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a40bb00b-3550-4ad2-95b7-e9321405a62a",
            "70bbd057-036e-46aa-af0c-a53d86091478"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2cd42bdf-02b4-49ce-82ae-a63172609a5b",
          "title": "[@update-data] PUT testcases",
          "fullFile": "C:\\Fazztrack_Satria\\mocha-homework\\testcases\\putTestcase.js",
          "file": "\\testcases\\putTestcase.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"[@update-data] PUT testcases\"",
              "fullTitle": "[@update-data] PUT testcases \"before all\" hook in \"[@update-data] PUT testcases\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//initial post the data\nlet response = await api.postUser(jsonPostData);\nexpect(response.status).to.equal(200);\ntargetID = response.body.id;",
              "err": {},
              "uuid": "74851086-fbb0-4296-b651-70d18ad61174",
              "parentUUID": "2cd42bdf-02b4-49ce-82ae-a63172609a5b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"[@update-data] PUT testcases\"",
              "fullTitle": "[@update-data] PUT testcases \"after all\" hook in \"[@update-data] PUT testcases\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//delete after finish\nlet response = await api.deleteUser(targetID);\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "e6e38ed8-c36d-47ca-a6b7-fd232dceef7d",
              "parentUUID": "2cd42bdf-02b4-49ce-82ae-a63172609a5b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[@positive1] update occupation and nationality data",
              "fullTitle": "[@update-data] PUT testcases [@positive1] update occupation and nationality data",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//update ID and other datas\nupdateData.id=targetID\nlet occupationUpdate = \"Soccer Player\"\nlet nationalityUpdate = \"Indonesian\"\nupdateData.occupation = occupationUpdate\nupdateData.nationality = nationalityUpdate\n\n     \nlet response = await api.putUser(updateData);\nexpect(response.status).to.equal(200); //status code check\nexpect(response.body.id).to.equal(targetID); //ID check\nexpect(response.body).to.contain.like({occupation: occupationUpdate, nationality: nationalityUpdate}); //data check\nexpect(response.body).jsonSchema(jsonSchemaPut); //schema check",
              "err": {},
              "uuid": "4b2bd4aa-054b-4da3-ad02-2d36f99c4750",
              "parentUUID": "2cd42bdf-02b4-49ce-82ae-a63172609a5b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@negative1] fail to update when age is 0",
              "fullTitle": "[@update-data] PUT testcases [@negative1] fail to update when age is 0",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "updateData.age = 0;\nlet response = await api.putUser(updateData);\nexpect(response.status).to.equal(400); //status code check\nexpect(response.body.errorCode).to.equal('ER-03'); //Error code check\nexpect(response.body).to.contain.like({\"message\": \"you must specify data for firstname, lastName, age, occupation, nationality, hobbies (at least 1), and gender\"}); //data check\nupdateData.age = 30;",
              "err": {},
              "uuid": "ad743b59-9e68-42e2-b84e-470e104999bb",
              "parentUUID": "2cd42bdf-02b4-49ce-82ae-a63172609a5b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@negative2] fail to update when hobbies is empty array",
              "fullTitle": "[@update-data] PUT testcases [@negative2] fail to update when hobbies is empty array",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "updateData.hobbies.length=0;\nlet response = await api.putUser(updateData);\nexpect(response.status).to.equal(400); //status code check\nexpect(response.body.errorCode).to.equal('ER-03'); //Error code check\nexpect(response.body).to.contain.like({\"message\": \"you must specify data for firstname, lastName, age, occupation, nationality, hobbies (at least 1), and gender\"}); //data check\nupdateData.hobbies=[\"Riding a motorcycle\"];",
              "err": {},
              "uuid": "306e0c97-bde7-4af4-a950-92fb5b1441b7",
              "parentUUID": "2cd42bdf-02b4-49ce-82ae-a63172609a5b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@negative3] fail to update when id is null",
              "fullTitle": "[@update-data] PUT testcases [@negative3] fail to update when id is null",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "updateData.id = null;\nlet response = await api.putUser(updateData);\nexpect(response.status).to.equal(404); //status code check\nexpect(response.body.errorCode).to.equal('ER-01'); //Error code check\nexpect(response.body).to.contain.like({\"message\": \"user not found\"}); //data check\nupdateData.id = targetID;",
              "err": {},
              "uuid": "d236829d-9a65-4776-a05d-1d93485affbd",
              "parentUUID": "2cd42bdf-02b4-49ce-82ae-a63172609a5b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4b2bd4aa-054b-4da3-ad02-2d36f99c4750",
            "ad743b59-9e68-42e2-b84e-470e104999bb",
            "306e0c97-bde7-4af4-a950-92fb5b1441b7",
            "d236829d-9a65-4776-a05d-1d93485affbd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}